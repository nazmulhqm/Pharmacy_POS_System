// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy_POS_System.Data;

#nullable disable

namespace Pharmacy_POS_System.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20250208184630_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Name = "Tylenol"
                        },
                        new
                        {
                            BrandId = 2,
                            Name = "Advil"
                        },
                        new
                        {
                            BrandId = 3,
                            Name = "Zyrtec"
                        },
                        new
                        {
                            BrandId = 4,
                            Name = "Nature Made"
                        },
                        new
                        {
                            BrandId = 5,
                            Name = "Neutrogena"
                        },
                        new
                        {
                            BrandId = 6,
                            Name = "Vicks"
                        },
                        new
                        {
                            BrandId = 7,
                            Name = "Pepto-Bismol"
                        },
                        new
                        {
                            BrandId = 8,
                            Name = "Bayer"
                        },
                        new
                        {
                            BrandId = 9,
                            Name = "Aquaphor"
                        },
                        new
                        {
                            BrandId = 10,
                            Name = "Glucerna"
                        });
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Pain Relief"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Allergy & Sinus"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Cold & Flu"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Vitamins & Supplements"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Skin Care"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Digestive Health"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "First Aid"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Diabetes Care"
                        });
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Return")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Taken")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PaymentId");

                    b.HasIndex("SaleId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DefaultDiscount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(2959),
                            DefaultDiscount = 0.0,
                            Description = "Pain reliever and fever reducer.",
                            Name = "Tylenol Extra Strength",
                            Price = 5.9900000000000002,
                            ProductImage = "tylenol.jpg",
                            Stock = 100
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(2982),
                            DefaultDiscount = 0.0,
                            Description = "Fast pain relief for headaches and muscle aches.",
                            Name = "Advil Liqui-Gels",
                            Price = 6.4900000000000002,
                            ProductImage = "advil.jpg",
                            Stock = 120
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 8,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(2991),
                            DefaultDiscount = 8.0,
                            Description = "Pain relief and heart health support.",
                            Name = "Bayer Aspirin",
                            Price = 4.9900000000000002,
                            ProductImage = "bayer.jpg",
                            Stock = 90
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(2993),
                            DefaultDiscount = 8.0,
                            Description = "24-hour allergy relief.",
                            Name = "Zyrtec Allergy Tablets",
                            Price = 12.99,
                            ProductImage = "zyrtec.jpg",
                            Stock = 80
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(2998),
                            DefaultDiscount = 7.0,
                            Description = "Fast-acting allergy relief.",
                            Name = "Claritin Non-Drowsy",
                            Price = 14.99,
                            ProductImage = "claritin.jpg",
                            Stock = 110
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(3005),
                            DefaultDiscount = 0.0,
                            Description = "Allergy nasal relief spray.",
                            Name = "Flonase Nasal Spray",
                            Price = 18.989999999999998,
                            ProductImage = "flonase.jpg",
                            Stock = 75
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(3007),
                            DefaultDiscount = 0.0,
                            Description = "Cold and flu relief.",
                            Name = "Vicks DayQuil",
                            Price = 8.9900000000000002,
                            ProductImage = "dayquil.jpg",
                            Stock = 95
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(3012),
                            DefaultDiscount = 6.0,
                            Description = "Nighttime flu relief.",
                            Name = "Vicks NyQuil",
                            Price = 9.4900000000000002,
                            ProductImage = "nyquil.jpg",
                            Stock = 90
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(3016),
                            DefaultDiscount = 8.0,
                            Description = "Expectorant and cough suppressant.",
                            Name = "Mucinex DM",
                            Price = 11.99,
                            ProductImage = "mucinex.jpg",
                            Stock = 85
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(3021),
                            DefaultDiscount = 7.0,
                            Description = "Supports immune health.",
                            Name = "Vitamin C Gummies",
                            Price = 9.9900000000000002,
                            ProductImage = "vitamin_c.jpg",
                            Stock = 150
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(3024),
                            DefaultDiscount = 0.0,
                            Description = "Daily essential vitamins.",
                            Name = "Nature Made Multivitamin",
                            Price = 13.99,
                            ProductImage = "multivitamin.jpg",
                            Stock = 130
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 2, 9, 0, 46, 26, 734, DateTimeKind.Local).AddTicks(3029),
                            DefaultDiscount = 8.0,
                            Description = "Supports heart and brain health.",
                            Name = "Fish Oil Omega-3",
                            Price = 15.99,
                            ProductImage = "fish_oil.jpg",
                            Stock = 110
                        });
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Adjustment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.SaleItem", b =>
                {
                    b.Property<int>("SaleItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleItemId"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SaleItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Payment", b =>
                {
                    b.HasOne("Pharmacy_POS_System.Entities.Sale", "Sale")
                        .WithOne("Payment")
                        .HasForeignKey("Pharmacy_POS_System.Entities.Payment", "SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Product", b =>
                {
                    b.HasOne("Pharmacy_POS_System.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Pharmacy_POS_System.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Sale", b =>
                {
                    b.HasOne("Pharmacy_POS_System.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.SaleItem", b =>
                {
                    b.HasOne("Pharmacy_POS_System.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pharmacy_POS_System.Entities.Sale", "Sale")
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pharmacy_POS_System.Entities.Sale", b =>
                {
                    b.Navigation("Payment");

                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
